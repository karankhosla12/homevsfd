<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Financial Profit Calculator</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> <!-- Chart.js library -->
  <style>
    /* General Styles */
    body {
      font-family: 'Poppins', sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f4f7fc;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      box-sizing: border-box;
    }

    .container {
      width: 100%;
      max-width: 600px;
      background-color: white;
      border-radius: 10px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      padding: 20px;
      text-align: center;
      box-sizing: border-box;
    }

    h1 {
      color: #333;
      margin-bottom: 20px;
      font-size: 24px;
    }

    .input-group {
      margin-bottom: 20px;
      text-align: left;
    }

    label {
      font-size: 16px;
      font-weight: 600;
      display: block;
      margin-bottom: 8px;
      color: #555;
    }

    input, button {
      width: 100%;
      padding: 10px;
      margin: 10px 0;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
    }

    button {
      background-color: #4CAF50;
      color: white;
      font-weight: bold;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    button:hover {
      background-color: #45a049;
    }

    .loading {
      display: none;
      animation: spin 1s linear infinite;
    }

    .result {
      display: none;
      margin-top: 20px;
      background-color: #f8f9fa;
      padding: 20px;
      border-radius: 5px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .result p {
      font-size: 18px;
      margin: 10px 0;
      color: #333;
    }

    .result h2 {
      font-size: 22px;
      margin-bottom: 10px;
      color: #007bff;
    }

    /* Loading Animation */
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Style for the modal */
    .modal {
      display: none; /* Hidden by default */
      position: fixed;
      z-index: 1; /* Sit on top */
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto; /* Enable scroll if needed */
      background-color: rgb(0, 0, 0); /* Black background */
      background-color: rgba(0, 0, 0, 0.4); /* Black with transparency */
      padding-top: 60px;
    }

    /* Modal content */
    .modal-content {
      background-color: #fefefe;
      margin: 5% auto;
      padding: 20px;
      border: 1px solid #888;
      width: 80%;
      max-width: 800px;
      border-radius: 8px;
    }

    /* Close button */
    .close {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
    }

    .close:hover,
    .close:focus {
      color: black;
      text-decoration: none;
      cursor: pointer;
    }

    /* Button to open the modal */
    #openGraphModalBtn {
      background-color: #4CAF50;
      color: white;
      padding: 15px 32px;
      font-size: 16px;
      cursor: pointer;
      border-radius: 8px;
    }

    #openGraphModalBtn:hover {
      background-color: #45a049;
    }

  </style>
</head>
<body>

  <div class="container">
    <h1>Financial Profit Calculator</h1>

    <div class="input-group">
      <label for="P">Principal Loan Amount (₹)</label>
      <input type="number" id="P" placeholder="Enter principal loan amount" required>
    </div>

    <div class="input-group">
      <label for="r">Annual Interest Rate for the Loan (%)</label>
      <input type="number" step="0.01" id="r" placeholder="Enter annual interest rate (in %)" required>
    </div>

    <div class="input-group">
      <label for="T">Loan Tenure (Years)</label>
      <input type="number" id="T" placeholder="Enter loan tenure in years" required>
    </div>

    <div class="input-group">
      <label for="Rent">Rent from Property (₹)</label>
      <input type="number" id="Rent" placeholder="Enter monthly rent" required>
    </div>

    <div class="input-group">
      <label for="SellingPrice">Expected Selling Price (₹)</label>
      <input type="number" id="SellingPrice" placeholder="Enter expected selling price" required>
    </div>

    <div class="input-group">
      <label for="FDRate">Fixed Deposit Rate (%)</label>
      <input type="number" step="0.01" id="FDRate" placeholder="Enter FD rate (in %)" required>
    </div>

    <button onclick="calculateProfit()">Calculate</button>

    <div class="loading">
      <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 50 50">
        <circle cx="25" cy="25" r="20" stroke="#4CAF50" stroke-width="5" fill="none"></circle>
      </svg>
    </div>

    <div class="result">
      <h2>Calculation Results</h2>
      <p><strong>EMI:</strong> ₹<span id="emiResult"></span></p>
      <p><strong>Total Payment:</strong> ₹<span id="totalPaymentResult"></span></p>
      <p><strong>Total Interest Paid:</strong> ₹<span id="totalInterestResult"></span></p>
      <p><strong>Net EMI:</strong> ₹<span id="netEmiResult"></span></p>
      <p><strong>Total Cost of the House:</strong> ₹<span id="totalCostResult"></span></p>
      <p><strong>Profit from Selling the House:</strong> ₹<span id="profitSellingResult"></span></p>
      <p><strong>Profit from FD:</strong> ₹<span id="profitFDResult"></span></p>
      <p><strong>Profit Difference (Selling - FD):</strong> ₹<span id="profitDifferenceResult"></span></p>
    </div>

    <!-- Button to open the modal -->
    <button id="openGraphModalBtn">View Graph</button>

    <!-- Modal structure -->
    <div id="graphModal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Profit Graph</h2>
        <div id="graphContainer">
          <canvas id="profitChart" width="400" height="200"></canvas>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Function to call the API and calculate results
    async function calculateProfit() {
      // Show loading animation
      document.querySelector('.loading').style.display = 'block';
      document.querySelector('.result').style.display = 'none';

      // Collect input values
      const P = parseFloat(document.getElementById('P').value);
      const r = parseFloat(document.getElementById('r').value) / 100 ;
      const T = parseInt(document.getElementById('T').value); // Loan tenure in years
      const Rent = parseFloat(document.getElementById('Rent').value);
      const SellingPrice = parseFloat(document.getElementById('SellingPrice').value);
      const FDRate = parseFloat(document.getElementById('FDRate').value);

      // Validate inputs
      if (isNaN(P) || isNaN(r) || isNaN(T) || isNaN(Rent) || isNaN(SellingPrice) || isNaN(FDRate)) {
        alert('Please fill in all fields with valid numbers.');
        document.querySelector('.loading').style.display = 'none';
        return;
      }

      // Prepare the API request
      const response = await fetch('https://polished-frost-8d49.karankhosla99.workers.dev/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ P, r, N: T * 12, T, Rent, SellingPrice, FDRate })
      });

      const data = await response.json();

      // Check if the response contains valid values
      if (!data || isNaN(data.ProfitFromFD) || isNaN(data.ProfitFromSelling) || isNaN(data.ProfitDifference)) {
        alert('There was an error with the calculation.');
        document.querySelector('.loading').style.display = 'none';
        return;
      }

      // Hide loading animation and show results
      document.querySelector('.loading').style.display = 'none';
      document.querySelector('.result').style.display = 'block';

      // Update the result fields with the API response
      document.getElementById('emiResult').innerText = data.EMI;
      document.getElementById('totalPaymentResult').innerText = data.TotalPayment;
      document.getElementById('totalInterestResult').innerText = data.TotalInterestPaid;
      document.getElementById('netEmiResult').innerText = data.NetEMI;
      document.getElementById('totalCostResult').innerText = data.TotalCostOfHouse;
      document.getElementById('profitSellingResult').innerText = data.ProfitFromSelling;
      document.getElementById('profitFDResult').innerText = data.ProfitFromFD;
      document.getElementById('profitDifferenceResult').innerText = data.ProfitDifference;

      // Create graph after results
      createGraph(T, P, r, Rent, SellingPrice, FDRate);
    }

    // Function to create the graph dynamically
    async function createGraph(T, P, r, Rent, SellingPrice, FDRate) {
      let years = [];
      let profitFromSelling = [];
      let profitFromFD = [];
      let profitDifference = [];

      for (let i = 1; i <= T; i++) {
        const response = await fetch('https://polished-frost-8d49.karankhosla99.workers.dev/', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ P, r, N: i * 12, T, Rent, SellingPrice, FDRate })
        });

        const data = await response.json();
        years.push(i);
        profitFromSelling.push(data.ProfitFromSelling);
        profitFromFD.push(data.ProfitFromFD);
        profitDifference.push(data.ProfitDifference);
      }

      const ctx = document.getElementById('profitChart').getContext('2d');
      new Chart(ctx, {
        type: 'bar',
        data: {
          labels: years,
          datasets: [
            {
              label: 'Profit from Selling',
              data: profitFromSelling,
              backgroundColor: 'rgba(54, 162, 235, 0.6)', // Blue
            },
            {
              label: 'Profit from FD',
              data: profitFromFD,
              backgroundColor: 'rgba(75, 192, 192, 0.6)', // Green
            }
          ]
        },
        options: {
          responsive: true,
          scales: {
            y: {
              beginAtZero: true
            }
          },
          plugins: {
            tooltip: {
              callbacks: {
                afterBody: function(tooltipItem) {
                  const year = tooltipItem[0].label;
                  const diff = profitDifference[year - 1];
                  return 'Profit Difference: ₹' + diff;
                }
              }
            }
          }
        }
      });
    }

    // Modal functionality
    const modal = document.getElementById("graphModal");
    const btn = document.getElementById("openGraphModalBtn");
    const span = document.getElementsByClassName("close")[0];

    // When the user clicks the button, open the modal
    btn.onclick = function() {
      modal.style.display = "block";
    }

    // When the user clicks the close button, close the modal
    span.onclick = function() {
      modal.style.display = "none";
    }

    // When the user clicks outside the modal, close it
    window.onclick = function(event) {
      if (event.target === modal) {
        modal.style.display = "none";
      }
    }
  </script>

</body>
</html>
